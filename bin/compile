#!/bin/sh

set -e

indent() {
  sed -u 's/^/       /'
}

###### install Rclone ##########
echo "-----> Installing rclone"
BUILD_DIR=$1
CACHE_DIR=$2
VENDOR_DIR="vendor"
FILE="rclone-v1.53.1-linux-amd64.zip"
DOWNLOAD_URL="https://downloads.rclone.org/v1.53.1/rclone-v1.53.1-linux-amd64.zip"
#DOWNLOAD_URL="https://downloads.rclone.org/v1.52.0/rclone-v1.52.0-linux-amd64.zip"


mkdir -p "$CACHE_DIR"

if ! [ -e "$CACHE_DIR/$FILE" ]; then
  echo "-----> Fetching Latest Rclone binaries at ${DOWNLOAD_URL}" | indent
  wget $DOWNLOAD_URL -q -O "$CACHE_DIR/$FILE"
else
  filestr=$(find . -name "$CACHE_DIR/$FILE" -mtime +1 -print)
  if [ "$filestr" = "" ]; then
    echo "-----> cache Expired, Fetching Latest Rclone at ${DOWNLOAD_URL}" | indent
    wget $DOWNLOAD_URL -q -O "$CACHE_DIR/$FILE"
  else
    echo "build using cached source"  | indent
  fi
fi

cd "$BUILD_DIR"
mkdir -p "$VENDOR_DIR"
cd "$VENDOR_DIR"
mkdir -p rclone
cd rclone
cp "$CACHE_DIR/$FILE" .
unzip -qqj "$FILE"
rm -rf "$FILE"
chmod 777 rclone

echo "exporting PATH" | indent
PROFILE_PATH="$BUILD_DIR/.profile.d/rclone.sh"
mkdir -p "$(dirname "$PROFILE_PATH")"
echo 'export PATH="$PATH:${HOME}/vendor/rclone"' >> $PROFILE_PATH
echo "Rclone installed"  | indent


###### install ffmpeg ##########
echo "-----> Installing ffmpeg"
FILE="ffmpeg-4.2.2-amd64-static"
FILE_DOWN="ffmpeg-release-amd64-static.tar.xz"
DOWNLOAD_URL="https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"

if ! [ -e "$CACHE_DIR/$FILE_DOWN" ]; then
  echo "-----> Fetching ffmpeg binaries at ${DOWNLOAD_URL}" | indent
  wget "$DOWNLOAD_URL" -q -O "$CACHE_DIR/$FILE_DOWN"
else
  echo "build using cached source"  | indent
fi


cd "$BUILD_DIR/$VENDOR_DIR"
mkdir -p ffmpeg
cd ffmpeg
cp "$CACHE_DIR/$FILE_DOWN" .
tar xf "$FILE_DOWN" --strip-components=1
rm -rf "$FILE_DOWN" "$FILE"


echo "exporting PATH" | indent
PROFILE_PATH="$BUILD_DIR/.profile.d/ffmpeg.sh"
mkdir -p "$(dirname "$PROFILE_PATH")"
echo 'export PATH="$PATH:${HOME}/vendor/ffmpeg"' >> $PROFILE_PATH
PROFILE_PATH="$BUILD_DIR/.profile.d/ffprobe.sh"
mkdir -p "$(dirname "$PROFILE_PATH")"
echo 'export PATH="$PATH:${HOME}/vendor/ffprobe"' >> $PROFILE_PATH

###### install youtube-dl ##########
echo "-----> Installing youtube-dl "

FILE="youtube-dl"
DOWNLOAD_URL="https://yt-dl.org/downloads/latest/$FILE"

echo "-----> Fetching youtube-dl  binaries at ${DOWNLOAD_URL}" | indent
wget $DOWNLOAD_URL -q -O "$CACHE_DIR/$FILE"


cd "$BUILD_DIR/$VENDOR_DIR"
mkdir -p youtube-dl
cd youtube-dl
cp "$CACHE_DIR/$FILE" .
chmod a+rx youtube-dl

echo "exporting PATH" | indent
PROFILE_PATH="$BUILD_DIR/.profile.d/youtube-dl.sh"
mkdir -p "$(dirname "$PROFILE_PATH")"
echo 'export PATH="$PATH:${HOME}/vendor/youtube-dl"' >> $PROFILE_PATH

###### install aria2 ##########
echo "-----> Installing Aria2"

FILE="aria2-1.34.0-linux-gnu-64bit-build1"
FILE_ARC="${FILE}.tar.bz2"
DOWNLOAD_URL="https://github.com/q3aql/aria2-static-builds/releases/download/v1.34.0/$FILE_ARC"

if ! [ -e "$CACHE_DIR/$FILE_ARC" ]; then
  echo "-----> Fetching Aria2 binaries at ${DOWNLOAD_URL}" | indent
  wget "$DOWNLOAD_URL" -q -O "$CACHE_DIR/$FILE_ARC"
else
  echo "build using cached source"  | indent
fi


cd "$BUILD_DIR/$VENDOR_DIR"
mkdir -p aria2c
cd aria2c
cp "$CACHE_DIR/$FILE_ARC" .
tar jxf "$FILE_ARC"
mv "$FILE"/* .
rm -rf "$FILE_ARC" "$FILE"

echo "exporting PATH" | indent
PROFILE_PATH="$BUILD_DIR/.profile.d/aria2c.sh"
mkdir -p "$(dirname "$PROFILE_PATH")"
echo 'export PATH="$PATH:${HOME}/vendor/aria2c"' >> $PROFILE_PATH

#### install winrar ########

echo "-----> Installing winrar"

FILE="rarlinux-x64-5.9.0.tar.gz"
DOWNLOAD_URL="https://www.rarlab.com/rar/$FILE"

if ! [ -e "$CACHE_DIR/$FILE" ]; then
  echo "-----> Fetching Winrar binaries at ${DOWNLOAD_URL}" | indent
  wget $DOWNLOAD_URL -q -O "$CACHE_DIR/$FILE"
else
  echo "build using cached source"  | indent
fi

cd "$BUILD_DIR/$VENDOR_DIR"
mkdir -p winrar
cd winrar
cp "$CACHE_DIR/$FILE" .
tar xf "$CACHE_DIR/$FILE" --strip-components=1

echo "exporting PATH" | indent
PROFILE_PATH="$BUILD_DIR/.profile.d/rar.sh"
mkdir -p "$(dirname "$PROFILE_PATH")"
echo 'export PATH="$PATH:${HOME}/vendor/winrar"' >> $PROFILE_PATH
PROFILE_PATH="$BUILD_DIR/.profile.d/unrar.sh"
mkdir -p "$(dirname "$PROFILE_PATH")"
echo 'export PATH="$PATH:${HOME}/vendor/winrar"' >> $PROFILE_PATH


#### install makemkv ##### <------- TODO

echo "-----> Installing makemkv"

FILE="makemkv.tar.gz"
DOWNLOAD_URL="https://www.dropbox.com/s/2bcbg4kchz7b5e6/makemkv.tar.gz"
wget $DOWNLOAD_URL -q -O "$CACHE_DIR/$FILE"

#if ! [ -e "$CACHE_DIR/$FILE" ]; then
#  echo "-----> Fetching Makemkv binaries at ${DOWNLOAD_URL}" | indent
#  wget $DOWNLOAD_URL -q -O "$CACHE_DIR/$FILE"
#else
#  echo "build using cached source"  | indent
#fi

cd "$BUILD_DIR/$VENDOR_DIR"
echo "$BUILD_DIR/$VENDOR_DIR"

mkdir -p makemkv
cd makemkv
tar xf "$CACHE_DIR/$FILE" --strip-components=1

chmod -v +x make* lib* mmccextr
# Librerias
#cp -v lib* 
#cp -v mmccextr /usr/bin/

echo "exporting PATH" | indent
PROFILE_PATH="$BUILD_DIR/.profile.d/makemkvcon.sh"
mkdir -p "$(dirname "$PROFILE_PATH")"
echo 'export PATH="$PATH:${HOME}/vendor/makemkv"' >> $PROFILE_PATH

#PROFILE_PATH="$BUILD_DIR/.profile.d/makemkv.sh"
#mkdir -p "$(dirname "$PROFILE_PATH")"
#echo 'export PATH="$PATH:${HOME}/vendor/makemkv"' >> $PROFILE_PATH

echo "exporting Lib" | indent
PROFILE_PATH="$BUILD_DIR/.profile.d/makemkvlib.sh"
mkdir -p "$(dirname "$PROFILE_PATH")"
echo 'export LD_LIBRARY_PATH="${HOME}/vendor/makemkv/lib:$LD_LIBRARY_PATH"' >> $PROFILE_PATH



#### install jq ########

echo "-----> Installing jq"

FILE="jq"
DOWNLOAD_URL="https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64"

if ! [ -e "$CACHE_DIR/$FILE" ]; then
  echo "-----> Fetching jq binaries at ${DOWNLOAD_URL}" | indent
  wget $DOWNLOAD_URL -q -O "$CACHE_DIR/$FILE"
else
  echo "build using cached source"  | indent
fi

cd "$BUILD_DIR/$VENDOR_DIR"
mkdir -p jq
cd jq
cp "$CACHE_DIR/$FILE" .
chmod +x jq
# tar xf "$CACHE_DIR/$FILE" --strip-components=1

echo "exporting PATH" | indent
PROFILE_PATH="$BUILD_DIR/.profile.d/jq.sh"
mkdir -p "$(dirname "$PROFILE_PATH")"
echo 'export PATH="$PATH:${HOME}/vendor/jq"' >> $PROFILE_PATH

#### install ack ########

echo "-----> Installing ack"

FILE="ack"
DOWNLOAD_URL="https://beyondgrep.com/ack-v3.4.0"

if ! [ -e "$CACHE_DIR/$FILE" ]; then
  echo "-----> Fetching ack binaries at ${DOWNLOAD_URL}" | indent
  wget $DOWNLOAD_URL -q -O "$CACHE_DIR/$FILE"
else
  echo "build using cached source"  | indent
fi

cd "$BUILD_DIR/$VENDOR_DIR"
mkdir -p ack
cd ack
cp "$CACHE_DIR/$FILE" .
chmod +x ack

echo "exporting PATH" | indent
PROFILE_PATH="$BUILD_DIR/.profile.d/ack.sh"
mkdir -p "$(dirname "$PROFILE_PATH")"
echo 'export PATH="$PATH:${HOME}/vendor/ack"' >> $PROFILE_PATH

#### install pv ########

echo "-----> Installing pv"

FILE="pv"
DOWNLOAD_URL="https://www.dropbox.com/s/i1qt63usn2auuvd/pv"

if ! [ -e "$CACHE_DIR/$FILE" ]; then
  echo "-----> Fetching pv binaries at ${DOWNLOAD_URL}" | indent
  wget $DOWNLOAD_URL -q -O "$CACHE_DIR/$FILE"
else
  echo "build using cached source"  | indent
fi

cd "$BUILD_DIR/$VENDOR_DIR"
mkdir -p pv
cd pv
cp "$CACHE_DIR/$FILE" .
chmod +x pv

echo "exporting PATH" | indent
PROFILE_PATH="$BUILD_DIR/.profile.d/pv.sh"
mkdir -p "$(dirname "$PROFILE_PATH")"
echo 'export PATH="$PATH:${HOME}/vendor/pv"' >> $PROFILE_PATH

#### install mediainfo ########

echo "-----> Installing mediainfo"

FILE="mediainfo"
DOWNLOAD_URL="https://www.dropbox.com/s/fzwf6rooe1j26vt/mediainfo"

if ! [ -e "$CACHE_DIR/$FILE" ]; then
  echo "-----> Fetching mediainfo binaries at ${DOWNLOAD_URL}" | indent
  wget $DOWNLOAD_URL -q -O "$CACHE_DIR/$FILE"
else
  echo "build using cached source"  | indent
fi
# echo "-----> Fetching mediainfo binaries at ${DOWNLOAD_URL}" | indent
# wget $DOWNLOAD_URL -q -O "$CACHE_DIR/$FILE"

cd "$BUILD_DIR/$VENDOR_DIR"
mkdir -p mediainfo
cd mediainfo
cp "$CACHE_DIR/$FILE" .
chmod +x mediainfo

echo "exporting PATH" | indent
PROFILE_PATH="$BUILD_DIR/.profile.d/mediainfo.sh"
mkdir -p "$(dirname "$PROFILE_PATH")"
echo 'export PATH="$PATH:${HOME}/vendor/mediainfo"' >> $PROFILE_PATH

#### test ########
whoami_=$(whoami)
echo "-----> [Whoami] $whoami_"
#### install mega ########

echo "-----> Installing mega"

FILE="megatools-1.11.0-git-20200830-linux-x86_64.tar.gz"
DOWNLOAD_URL="https://megatools.megous.com/builds/experimental/megatools-1.11.0-git-20200830-linux-x86_64.tar.gz"

if ! [ -e "$CACHE_DIR/$FILE" ]; then
  echo "-----> Fetching Winrar binaries at ${DOWNLOAD_URL}" | indent
  wget $DOWNLOAD_URL -q -O "$CACHE_DIR/$FILE"
else
  echo "build using cached source"  | indent
fi

cd "$BUILD_DIR/$VENDOR_DIR"
mkdir -p megatools
cd megatools
cp "$CACHE_DIR/$FILE" .
tar xf "$CACHE_DIR/$FILE" --strip-components=1

echo "exporting PATH" | indent
PROFILE_PATH="$BUILD_DIR/.profile.d/megatools.sh"
mkdir -p "$(dirname "$PROFILE_PATH")"
echo 'export PATH="$PATH:${HOME}/vendor/megatools"' >> $PROFILE_PATH


#### moving rclone.conf ########

echo 'export LANG=C.UTF-8' >> $PROFILE_PATH
mkdir -p "$BUILD_DIR"/.profile.d
cat <<EOF >"$BUILD_DIR"/.profile.d/rclone_config.sh
#!/bin/sh
cd "\$HOME"
echo "-----> moving config file, rclone.conf"
if [ -f "rclone.conf" ]; then
  mkdir -p .config/rclone
  mv -f rclone.conf .config/rclone/rclone.conf
  echo "-----> Done."
else
  echo "rclone.conf not exist"  | indent
fi

echo "-----> moving config file, rclone.conf"
if [ -f "telegram-upload.json" ]; then
  mkdir -p .config/
  mv -f telegram-upload.json .config/telegram-upload.json
  echo "-----> Done."
else
  echo "telegram-upload.json not exist"  | indent
fi

echo "-----> moving id_rsa"
if [ -f "id_rsa" ]; then
  mkdir -p .ssh
  mv -f id_rsa .ssh/id_rsa
  chmod 0700 .ssh/id_rsa
  echo "-----> Done."
else
  echo "id_rsa not exist"  | indent
fi

chmod +x *.sh *.py zdownloader
chmod -R +x nova/ python-repo/
